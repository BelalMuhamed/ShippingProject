// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShippingManagementSystem.Infrastructure.Data;

#nullable disable

namespace ShippingManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Branches", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.ChargeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ExtraPrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChargeTypes", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ChargePrice")
                        .HasColumnType("float");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PickUpPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Citys", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("governorates", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.GroupMedule", b =>
                {
                    b.Property<int>("MeduleId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.HasKey("MeduleId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupMedules", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Medule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medules", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.MerchantCity", b =>
                {
                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.HasKey("MerchantId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("MerchantCities", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.MerchantSpecialPrice", b =>
                {
                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<double>("SpecialPrice")
                        .HasColumnType("float");

                    b.HasKey("MerchantId", "CityId");

                    b.HasIndex("CityId");

                    b.ToTable("MerchantSpecialPrices", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountReceived")
                        .HasColumnType("float");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<double>("ChargePrice")
                        .HasColumnType("float");

                    b.Property<int>("ChargeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("ShippigRepresentativeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ShippingToVillage")
                        .HasColumnType("bit");

                    b.Property<int>("TotalWeight")
                        .HasColumnType("int");

                    b.Property<string>("VillageAndStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ChargeTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("ShippigRepresentativeId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.RejectedReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RejectedReasons", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.RejectedReasonOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("RejectedReasonId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "RejectedReasonId");

                    b.HasIndex("RejectedReasonId");

                    b.ToTable("RejectedReasonOrder", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.ShippingRepGovernorate", b =>
                {
                    b.Property<string>("ShippingRepId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.HasKey("ShippingRepId", "GovernorateId");

                    b.HasIndex("GovernorateId");

                    b.ToTable("ShippingRepGovernorates", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KGprice")
                        .HasColumnType("int");

                    b.Property<int>("StandardWeight")
                        .HasColumnType("int");

                    b.Property<int>("VillagePrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Standards", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.UserBranches", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranches", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.Employee", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("GroupId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.Merchant", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("RejectedOrederPercentage")
                        .HasColumnType("float");

                    b.Property<int?>("SpecialPickUp")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Merchants", (string)null);
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.ShippigRepresentative", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CompanyPersentage")
                        .HasColumnType("float");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.ToTable("ShippigRepresentatives", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Branch", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.City", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.Governorate", "Governorate")
                        .WithMany("Citys")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.GroupMedule", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.Group", "Group")
                        .WithMany("GroupMedules")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.Entities.Medule", "Medule")
                        .WithMany("GroupMedules")
                        .HasForeignKey("MeduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Medule");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.MerchantCity", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.City", "City")
                        .WithMany("MerchantCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.Merchant", "Merchant")
                        .WithMany("MerchantCities")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.MerchantSpecialPrice", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.Merchant", "Merchant")
                        .WithMany("MerchantSpecialPrices")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Order", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.Branch", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.Entities.ChargeType", "ChargeType")
                        .WithMany()
                        .HasForeignKey("ChargeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ShippigRepresentative", "ShippigRepresentative")
                        .WithMany()
                        .HasForeignKey("ShippigRepresentativeId");

                    b.Navigation("Branches");

                    b.Navigation("ChargeType");

                    b.Navigation("City");

                    b.Navigation("Merchant");

                    b.Navigation("ShippigRepresentative");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Product", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.RejectedReasonOrder", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.Order", "Order")
                        .WithMany("RejectedReasons")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.Entities.RejectedReason", "RejectedReason")
                        .WithMany("Orders")
                        .HasForeignKey("RejectedReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("RejectedReason");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.ShippingRepGovernorate", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.Governorate", "Governorate")
                        .WithMany("ShippingRepGovernorates")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ShippigRepresentative", "ShippigRepresentative")
                        .WithMany("ShippingRepGovernorates")
                        .HasForeignKey("ShippingRepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("ShippigRepresentative");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.UserBranches", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.Branch", "Branch")
                        .WithMany("UserBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", "User")
                        .WithMany("UserBranches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.Employee", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.Entities.Group", "Group")
                        .WithMany("User")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", "User")
                        .WithOne("Employee")
                        .HasForeignKey("ShippingManagementSystem.Domain.UserTypes.Employee", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.Merchant", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", "User")
                        .WithOne("Merchant")
                        .HasForeignKey("ShippingManagementSystem.Domain.UserTypes.Merchant", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.ShippigRepresentative", b =>
                {
                    b.HasOne("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", "User")
                        .WithOne("Representive")
                        .HasForeignKey("ShippingManagementSystem.Domain.UserTypes.ShippigRepresentative", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Branch", b =>
                {
                    b.Navigation("UserBranches");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.City", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("MerchantCities");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Governorate", b =>
                {
                    b.Navigation("Citys");

                    b.Navigation("ShippingRepGovernorates");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupMedules");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Medule", b =>
                {
                    b.Navigation("GroupMedules");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.Order", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("RejectedReasons");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.Entities.RejectedReason", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.ApplicationUser", b =>
                {
                    b.Navigation("Employee");

                    b.Navigation("Merchant");

                    b.Navigation("Representive");

                    b.Navigation("UserBranches");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.Merchant", b =>
                {
                    b.Navigation("MerchantCities");

                    b.Navigation("MerchantSpecialPrices");
                });

            modelBuilder.Entity("ShippingManagementSystem.Domain.UserTypes.ShippigRepresentative", b =>
                {
                    b.Navigation("ShippingRepGovernorates");
                });
#pragma warning restore 612, 618
        }
    }
}
